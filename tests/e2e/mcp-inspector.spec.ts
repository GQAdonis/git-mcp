import { test, expect, Page } from '@playwright/test';

const INSPECTOR_URL = 'https://inspect.mcp.garden/';
const PREVIEW_URL = process.env.PREVIEW_URL;

test.describe('MCP E2E Tests', () => {
  let page: Page;

  test.beforeAll(async ({ browser }) => {
    page = await browser.newPage();
    if (!PREVIEW_URL) {
      throw new Error('PREVIEW_URL environment variable is not set. Make sure the GitHub Action deploys and exports it.');
    }
    console.log(`Testing against preview URL: ${PREVIEW_URL}`);
  });

  test.afterAll(async () => {
    await page.close();
  });

  test('Connect to preview and call fetch_documentation', async () => {
    await page.goto(INSPECTOR_URL);

    // --- 1. Connect to the Preview Worker ---
    // Replace with the actual selector for the server input field
    const serverInputSelector = 'input[placeholder*="Enter server URL"]'; 
    await page.waitForSelector(serverInputSelector);
    await page.fill(serverInputSelector, PREVIEW_URL!);

    // Replace with the actual selector for the connect button
    const connectButtonSelector = 'button:has-text("Connect")';
    await page.click(connectButtonSelector);

    // Wait for connection confirmation (adjust selector/logic as needed)
    // Example: Wait for the tool list to appear or a status message
    await expect(page.locator('text=Available Tools')).toBeVisible({ timeout: 15000 }); // Increased timeout
    console.log('Successfully connected to preview server.');

    // --- 2. Find and Call a Tool (e.g., fetch_documentation) ---
    // Replace with the actual selector for the specific tool button/element
    // The tool name might be dynamically generated, e.g., fetch_myrepo_documentation
    // You might need to adjust this selector based on the actual tool name generated by your worker
    const fetchToolSelector = 'button[data-tool-name*="fetch_"][data-tool-name*="_documentation"]'; // Example selector
    await page.waitForSelector(fetchToolSelector);
    await page.click(fetchToolSelector);
    console.log('Clicked fetch documentation tool.');

    // --- 3. Wait for and Validate the Result ---
    // Replace with selectors for the response area/elements containing the result
    const responseAreaSelector = '.response-content pre'; // Example selector for a preformatted text response
    await page.waitForSelector(responseAreaSelector, { timeout: 20000 }); // Wait longer for tool execution

    const responseElement = page.locator(responseAreaSelector);
    const responseText = await responseElement.innerText();

    console.log('Received response:', responseText.substring(0, 200) + '...');

    // Add specific assertions based on the expected output of fetch_documentation
    // Example: Check if it includes specific documentation text
    expect(responseText).toContain('No documentation found.'); // Adjust based on actual expected content
    expect(responseText).not.toContain('Error');

    // --- Add more test steps for other tools (search_documentation, search_code) ---
    // test('Call search_documentation', async () => { ... });
  });

  // Add more tests for different tools or scenarios
}); 